#!/bin/bash

#### psuedo-parses all malware assembly code
#### genertes text like files of opcode sequences

SOURCE_DIR="malware_by_class"
DESTINATION_DIR="new_experiments/parsed_malwares"
TEMP_DESTINATION_DIR="temp_parsed_malwares"

ASSEMBLY_TO_HEX="assembly_hex.txt"
ASSEMBLY="assembly.txt"
TEMP_FILE="temp_lang"
LOG_FILE="logs.txt"

class=$1



# create destination directories if they do not exist 
[[ -d ${DESTINATION_DIR} ]] || mkdir ${DESTINATION_DIR}
[[ -d ${TEMP_DESTINATION_DIR} ]] || mkdir ${TEMP_DESTINATION_DIR}



# remove pre-existing log file
rm "${LOG_FILE}"

        

echo
echo "Parsing malware assembly files."
echo
INPUT_DIR="${SOURCE_DIR}/${class}"
OUTPUT_FILE="${TEMP_DESTINATION_DIR}/malware_lang_temp"


COUNTER=1
for file in "${INPUT_DIR}/"*.asm;
do
        echo "... parsing ${file}"


	# remove assembly code, keeping only .text code region

	# delete all lines that begin with "HEADER"; this code refers to static information regarding the malware; we are not concerned with static analysis at the moment
	# delete all lines that begin with ".idata", ".edata", ".rdata", ".data", ".bss"; this code refers to non-stack variables; we are not concerned with variables at the moment
	# delete all lines that begin with ".rsrc"
	# delete all lines that begin with ".debug"
	
	# parse ".text" region:	remove all comments;
	#			keep only text assembly instructions with specified opcodes;
	# 			format syntax: remove leading and trailing whitespaces and new lines; collapse all spaces



# slow method:
#	sed -n "/HEADER/ d; /.idata/ d; /.edata/ d; /.rdata/ d; /.data/ d; /.bss/ d; /.rsrc/ d; /.debug/ d; s/\;.*//g; $(sed 's:.*:s/.*  *\\(&  .* *\\)/\\1/p:' assembly.txt)" "${file} >> "${DESTINATION_DIR}/malware_lang_${class}_${COUNTER}"



# faster method:
	sed -n "/HEADER/ d; /.idata/ d; /.edata/ d; /.rdata/ d; /.data/ d; /.bss/ d; /.rsrc/ d; /.debug/ d; s/\;.*//g; $(sed 's:.*:/  &  / p:' assembly.txt);" "${file}" >> "${DESTINATION_DIR}/malware_lang_${class}_${COUNTER}"
	sed -i "$(sed 's:.*:s/.*  &  /&/g:' assembly.txt); s/^[ \t]*//; s/[ \t]*$//; s/ \+/ /g; s/, /./g; s/ /./g;" "${DESTINATION_DIR}/malware_lang_${class}_${COUNTER}"


        echo "done."
        let COUNTER=${COUNTER}+1
done


