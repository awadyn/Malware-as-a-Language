import sys
import os

import gensim
import pickle

from collections import Counter


malware_train_docs = dict()
malware_train_dir = 'new_experiments/parsed_malwares'
for root, dirs, filenames in os.walk(malware_train_dir):
        for malware in filenames:
                malware_train_docs[malware] = open(os.path.join(root, malware), 'r').read().splitlines()                


vocabulary = []
for malware in malware_train_docs:
        vocabulary.append(malware_train_docs[malware])


model = gensim.models.Word2Vec(vocabulary, sg=1, min_count=1)
print('vocabulary size  =  ' + str(len(model.wv.vocab)))


print('calculating distances...\n')
distances = dict()
bad_malwares = []
for root, dirs, filenames in os.walk(malware_train_dir):
    for test_malware in filenames:
        if test_malware in bad_malwares:
                continue
        malware_test_doc = open(os.path.join(root, test_malware), 'r').read().splitlines()
        print('document size  =  ' + str(len(list(set(malware_test_doc)))))
        distances[test_malware] = dict()
        train_malwares = filenames[:]
        train_malwares.remove(test_malware)
        for malware in train_malwares:
                if malware in bad_malwares:
                        continue
                try:
                        distance = model.wmdistance(malware_train_docs[malware], malware_test_doc)
                        distances[test_malware][malware] = distance
                        print('distance from ' + malware + '  =  ' + str(distance))
                except UnicodeDecodeError as err:
                        if err.object in malware_train_docs[malware]:
                                print(malware + ' contains: ' + err.object)
                                bad_malwares.append(malware)
                        else:
                                print(test_malware + ' contains: ' + err.object)
                                bad_malwares.append(test_malware)
        print('finished calculating distances from train malwares to ' + test_malware)
print('bad malwares\n')
print(bad_malwares)


## write distances dictionary to file
with open('distances.pickle', 'wb') as handle:
        pickle.dump(distances, handle, protocol=pickle.HIGHEST_PROTOCOL)
#
#
#
#print('\n\nfinding nearest neighbors...\n')
#for root, dirs, filenames in os.walk(malware_train_dir):
#        for test_malware in filenames:
#                out_file = open('results/' + test_malware, 'a')
#                
#                sorted_distances = sorted((distances[test_malware]).values())
#                closest_malwares_10 = []
#                closest_classes_10 = []
#                for i in range(0, 10):
#                        for malware, distance in distances[test_malware].items():
#                                if distance == sorted_distances[i]:
#                                        closest_malwares_10.append(malware)
#                                        closest_classes_10.append(malware[malware.index('_') + 6 : malware.index('_') + 7])
#                counter = Counter(closest_classes_10)
#                closest_class = counter.most_common()[0][0]
#                print('\n10 closest malwares to ' + test_malware + ' :\n')
#                print(counter.most_common())
#                print('10_NN classification  =  ' + closest_class)
#                print('\n')
#                out_file.write('10_NN classification  =  ' + closest_class + '\n')
                
#                closest_malwares_20 = []
#                closest_classes_20 = []
#                for i in range(0, 20):
#                        for malware, distance in distances[test_malware].items():
#                                if distance == sorted_distances[i]:
#                                        closest_malwares_20.append(malware)
#                                        closest_classes_20.append(malware[malware.index('_') + 6 : malware.index('_') + 7])
#                counter = Counter(closest_classes_20)
#                closest_class = counter.most_common()[0][0]
#                print('\n20 closest malwares to ' + test_malware + ' :\n')
#                print(counter.most_common())
#                print('20_NN classification  =  ' + closest_class)
#                print('\n')
#                out_file.write('20_NN classification  =  ' + closest_class + '\n')
#
#                closest_malwares_30 = []
#                closest_classes_30 = []
#                for i in range(0, 30):
#                        for malware, distance in distances[test_malware].items():
#                                if distance == sorted_distances[i]:
#                                        closest_malwares_30.append(malware)
#                                        closest_classes_30.append(malware[malware.index('_') + 6 : malware.index('_') + 7])
#                counter = Counter(closest_classes_30)
#                closest_class = counter.most_common()[0][0]
#                print('\n30 closest malwares to ' + test_malware + ' :\n')
#                print(counter.most_common())
#                print('30_NN classification  =  ' + closest_class)
#                print('\n')
#                out_file.write('30_NN classification  =  ' + closest_class + '\n')

#                print('\n\n\n')
