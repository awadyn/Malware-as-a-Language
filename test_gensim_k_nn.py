import sys
import os

import gensim
import pickle



malware_train_docs = dict()
malware_train_dir = 'parsed_malware'
for root, dirs, filenames in os.walk(malware_train_dir):
        for malware in filenames:
                malware_train_docs[malware] = open(os.path.join(root, malware), 'r').read().splitlines()                


vocabulary = []
for malware in malware_train_docs:
        vocabulary.append(malware_train_docs[malware])


alg = int(sys.argv[1])
win = int(sys.argv[2])
model = gensim.models.Word2Vec(vocabulary, workers=8, sg=alg, window=win, min_count=1)
print('vocabulary size  =  ' + str(len(model.wv.vocab)))
print('algorithm  =  ' + str(model.sg))
print('window size  =  ' + str(model.window))


print('calculating distances...\n')
distances = dict()
bad_malwares = []
for root, dirs, filenames in os.walk(malware_train_dir):
    for test_malware in filenames:
        if test_malware in bad_malwares:
                continue
        malware_test_doc = open(os.path.join(root, test_malware), 'r').read().splitlines()
        distances[test_malware] = dict()
        train_malwares = filenames[:]
        train_malwares.remove(test_malware)
        for malware in train_malwares:
                if malware in bad_malwares:
                        continue
                try:
                        distance = model.wmdistance(malware_train_docs[malware], malware_test_doc)
                        distances[test_malware][malware] = distance
                except UnicodeDecodeError as err:
                        if err.object in malware_train_docs[malware]:
                                bad_malwares.append(malware)
                        else:
                                bad_malwares.append(test_malware)
        print('finished calculating distances for ' + test_malware)


## write distances dictionary to file
with open('distances_win' + str(win) + '_sg' + str(alg) + '.pickle', 'wb') as handle:
        pickle.dump(distances, handle, protocol=pickle.HIGHEST_PROTOCOL)
